import requests
from bs4 import BeautifulSoup as bs
from urllib.parse import urljoin

# Querying the target URL for the form and extracting the action and input fields
# Testing the form with SQL injection

req = requests.Session() # Initialising the HTTP session
req.headers["User-Agent"] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.106 Safari/537.36" # Setting the User-Agent

def get_page(url): # Getting the page content with BeautifulSoup
    soup = bs(req.get(url).text, 'html.parser')
    return soup.findAll('form')

def get_page_details(content): # Extracting the input fields
    details = {}

    try:
        action = content.attrs.get('action').lower()
    except:
        action = 'none'

    method = content.attrs.get('method', 'get').lower() # Defaulting to GET if not specified

    inputs = []

    for i in content.findAll('input'): # Extracting the input fields
        in_type = i.attrs.get('type', 'text')
        in_name = i.attrs.get('name')
        in_value = i.attrs.get('value')
        inputs.append({'type' : in_type, 'name' : in_name, 'value' : in_value})

    details['action'] = action
    details['method'] = method
    details['inputs'] = inputs

    return details

#TODO: Add additional error handling to avoid false positives
def vulnerable(response):
    errors = ['error in your SQL syntax',
              'you have an error in your SQL syntax',
              'warning: mysql',
              'supplied argument is not a valid MySQL',
              'Unclosed quotation mark after the character string',
              'Incorrect syntax near']

    for i in errors:
        if i in response.content.decode('utf-8').lower():
            return False

    return True

def sql_injection(url):
    print_url = []

    if not url:
        #log_box.config(text='Please enter a URL')
        return 'Please enter a URL'

    for c in "\"'":
        temp_url = f'{url}{c}'
        res = req.get(temp_url)

        if vulnerable(res): # Checking for vulnerable HTTP requests
            print_url.append('Vulnerable URL:' + temp_url + '\n')
            #print(f'Vulnerable URL: {temp_url} \n')

    pages = get_page(url)

    for page in pages:
        details = get_page_details(page)

        for c in "\"'":

            data = {}

            for inp in details['inputs']:
                if inp['type'] == 'hidden' or inp['type'] == 'value':

                    try:
                        data[inp['name']] = inp['value'] + c # Adding the SQL injection character
                    except:
                        pass

                elif inp['type'] != 'submit':
                    data[inp['name']] = f'test{c}'

            url = urljoin(url, details['action'])

            if details['method'] == 'post':
                res = req.post(url, data=data)
            elif details['method'] == 'get':
                res = req.get(url, data=data)

            if vulnerable(res):
                #print(f'Vulnerable URL: {url} \n')
                print_url.append('Vulnerable URL:' + temp_url + '\n')

    if len(print_url) > 0:
        #log_box.config(text=f'Vulnerable URLs: {print_url}')
        return print_url
    else:
        #log_box.config(text='No vulnerable URLs found')
        return 'No vulnerable URLs found'

#url = 'http://localhost/dvwa/vulnerabilities/sqli/'
#sql_injection(url)